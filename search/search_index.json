{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#what-is-rsp","title":"What is RSP?","text":"<p>We built RSP to provide a simple, robust, and scalable way for web3 multiplayer games to provide revenue sharing to their player and investor bases. The RSP API provides a unified interface for managing player data and relationships, giving you the tools to create engaging and rewarding experiences for your players with previously unfeasible functionality.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before you can start integrating RSP into your game, make sure you have the following:</p> <ul> <li>Account Credentials: Request your unique <code>RSP_KEY</code>. This key is required to authenticate your requests to the RSP API.</li> </ul>"},{"location":"#making-requests-to-rsp","title":"Making Requests to RSP","text":"<p>You can submit requests to the RSP API in any programming language that supports HTTP requests. An example using Python is provided below.</p> Python <pre><code>import requests\nfrom tictactokens.settings import RSP_KEY, RSP_URL\n\nrsp_headers = {\"RSP_KEY\": RSP_KEY}\nresponse = requests.get(f\"{RSP_URL}/get_player_inventory/&lt;PLAYER_IGN&gt;/\", headers=rsp_headers)\n</code></pre> <p>In the code snippet above, ensure that you replace <code>RSP_KEY</code> with your actual RSP key and <code>RSP_URL</code> with the appropriate base URL for the RSP API.</p>"},{"location":"#rsp-key-best-practices","title":"RSP Key Best Practices","text":"<p>To ensure the security of your RSP key and protect it from unauthorized access, consider implementing the following guidelines and best practices:</p> <ul> <li> <p>Secret Management: Treat your RSP key as a secret and avoid hardcoding it directly in your game's source code or configuration files. Instead, store it securely in a dedicated secrets management system or environment variable.</p> </li> <li> <p>Access Control: Limit the access and distribution of the RSP key to only authorized personnel. Follow the principle of least privilege, providing the key only to those who require it for integration purposes.</p> </li> <li> <p>Secure Communication: When making requests to the RSP API, ensure that you use secure communication channels (e.g., HTTPS) to encrypt the data transmitted between your game and the RSP servers. This helps protect the confidentiality and integrity of your requests and responses.</p> </li> <li> <p>Auditing and Monitoring: Implement logging and monitoring mechanisms to track the usage of the RSP key within your game application. Regularly review the logs to detect any suspicious activity or unauthorized access attempts.</p> </li> <li> <p>Secure Development Practices: Follow secure coding practices to prevent common vulnerabilities, such as injection attacks or unintentional exposure of sensitive data. Be cautious when logging or debugging your game, ensuring that the RSP key is not inadvertently included in log files or error messages.</p> </li> </ul>"},{"location":"#error-and-response-handling","title":"Error and Response Handling","text":"<p>When interacting with the RSP API, it is important to understand the error handling and response format to effectively handle responses and troubleshoot integration issues. While the exact formatting of every endpoint's response may vary, RSP follows a standard format.</p>"},{"location":"#response-structure","title":"Response Structure","text":"<p>The response from the RSP API typically consists of two main parts:</p> <ul> <li> <p>Success: The <code>success</code> field indicates whether the requested action was able to execute without any errors or if any of the requested information was successfully retrieved. It is a boolean value, where <code>True</code> signifies successful execution, and <code>False</code> indicates an error or unsuccessful operation.</p> </li> <li> <p>Response: The <code>response</code> field contains the information relevant to the requested action or retrieved data. Its structure may vary depending on the specific endpoint. In the example above, the <code>sample_response_data</code> dictionary provides the <code>results</code>, <code>has_next_page</code>, and <code>cursor</code> information.</p> <p>Note</p> <p>If the <code>success</code> field is <code>False</code>, the <code>response</code> field will contain an error message explaining why the operation was unsuccessful.</p> </li> </ul>"},{"location":"#example-response","title":"Example Response","text":"PythonC# <pre><code>sample_response_data = {\n    'cursor': a1sd3iu7ag_32jf93nf84fk39Rgknmm08nf,\n    'has_next_page': True,\n    'results': [...],\n}\n\nresponse = { \"success\": True, \"response\": sample_response_data }\n</code></pre> <pre><code>var sampleResponseData = new Dictionary&lt;string, object&gt;\n{\n    { \"results\", [...] },\n    { \"has_next_page\", true },\n    { \"cursor\", \"a1sd3iu7ag_32jf93nf84fk39Rgknmm08nf\" },\n};\n\nvar response = new Dictionary&lt;string, object&gt;\n{\n    { \"success\", true },\n    { \"response\", sampleResponseData },\n};\n</code></pre>"},{"location":"#error-handling","title":"Error Handling","text":"<p>When an error occurs, the RSP API will typically return a response indicating the error condition. Although the specific error format may vary, it is important to handle errors gracefully. Here are some general guidelines for error handling when integrating with the RSP API:</p> <ul> <li> <p>Conditional Checking: Before processing the response data, check the success field. If it is True, proceed with further processing. If it is False, handle the error condition and provide appropriate feedback to users or take necessary actions in your game application.</p> </li> <li> <p>Error Messages: Extract error messages from the response if available. Error messages can provide useful information for troubleshooting or displaying to users in case of errors. Incorporate these messages into your error handling logic.</p> </li> <li> <p>Logging and Debugging: Implement logging and error tracking mechanisms within your game application to capture any errors or exceptions that occur during interactions with the RSP API. This information can be invaluable for diagnosing and resolving integration issues.</p> </li> </ul>"},{"location":"blockchain/","title":"Blockchain","text":""},{"location":"blockchain/#coming-soon","title":"Coming Soon","text":""},{"location":"info-endpoints/","title":"Core Endpoints","text":""},{"location":"info-endpoints/#create-players","title":"Create Players","text":"<p>The <code>create_players</code> endpoint allows you to create players for a specific game in the RSP API. This endpoint accepts a POST request to create multiple players in a single call.</p>"},{"location":"info-endpoints/#endpoint-url","title":"Endpoint URL","text":"<pre><code>POST /create_players/\n</code></pre>"},{"location":"info-endpoints/#request-format","title":"Request Format","text":"<p>The request should include the following parameters:</p> <ul> <li><code>igns</code> (list): A list of in-game names (IGNs) for the players to be created.</li> </ul> <p>Example Request Body:</p> JSON <pre><code>{\n    \"igns\": [\"PLAYER1\", \"PLAYER2\", \"PLAYER3\"]\n}\n</code></pre>"},{"location":"info-endpoints/#response-format","title":"Response Format","text":"<p>The response from the <code>create_players</code> endpoint follows a standard format:</p> <ul> <li><code>players_created</code> (int): The number of players that were successfully created.</li> <li><code>pre-existing_players</code> (list): A list of players that already existed in the RSP records.</li> </ul> <p>Example Response Body (Success):</p> JSON <pre><code>{\n    \"success\": true,\n    \"response\": {\n        \"players_created\": 3,\n        \"pre-existing_players\": []\n    }\n}\n</code></pre> <p>Example Response Body (Error):</p> JSON <pre><code>{\n    \"success\": false,\n    \"response\": {\n        \"error\": \"Invalid request payload\"\n    }\n}\n</code></pre>"},{"location":"info-endpoints/#integration-example","title":"Integration Example","text":"<p>Here's an example of how you can call the <code>create_players</code> endpoint from your game's backend:</p> Python <pre><code>import requests\n\ndef rsp_create_players(payload):\n    response = requests.post(f\"{RSP_URL}/create_players/\", json=payload, headers=rsp_headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n</code></pre> <p>In this example, <code>RSP_URL</code> refers to the base URL of the RSP API, and <code>rsp_headers</code> includes the necessary headers for authentication with the RSP API.</p> <p>To create players and integrate with the RSP API, you can make a POST request to the <code>create_players</code> endpoint, providing the necessary payload data.</p> Python <pre><code>payload = {\n    \"igns\": [\"PLAYER1\", \"PLAYER2\", \"PLAYER3\"]\n}\n\nrsp_players = rsp_create_players(payload)\n\nif rsp_players[\"success\"]:\n    # Players created successfully\n    # Handle the response data as needed\nelse:\n    # Error occurred while creating players\n    # Handle the error response\n</code></pre>"},{"location":"info-endpoints/#get-player-inventory","title":"Get Player Inventory","text":"<p>The <code>get_player_inventory</code> endpoint retrieves the inventory of a player for a specific game in the RSP API. This endpoint accepts a POST request to retrieve the inventory information.</p>"},{"location":"info-endpoints/#endpoint-url_1","title":"Endpoint URL","text":"<pre><code>POST /get_player_inventory/&lt;str:ign&gt;/\n</code></pre>"},{"location":"info-endpoints/#request-format_1","title":"Request Format","text":"<p>The request should include the following parameters:</p> <ul> <li><code>nfts_in_wallet</code> (list): A list of token IDs representing the NFTs in the player's wallet.</li> <li><code>availability_types</code> (optional): A list of availability types to filter the inventory response. This parameter can be specified as a list of the following values, or omitted to retrieve all NFTs:<ul> <li><code>owned_and_available</code> - NFTs that are owned by the player and available to be used in-game by this player.</li> <li><code>owned_not_available</code> - NFTs that are owned by the player but are currently not able to be used in-game by this player.</li> <li><code>available_not_owned</code> - NFTs that are owned by another player but are currently being used in-game by this player.</li> </ul> </li> </ul> <p>Example Request Body:</p> JSON <pre><code>{\n    \"nfts_in_wallet\": [\"NFT1\", \"NFT2\"],\n    \"availability_types\": [\"owned_and_available\", \"available_not_owned\"]\n}\n</code></pre>"},{"location":"info-endpoints/#response-format_1","title":"Response Format","text":"<p>The response from the <code>get_player_inventory</code> endpoint follows a standard format:</p> <ul> <li><code>lender_ign</code> (string): The in-game name (IGN) of the player who lent the NFTs to the player. Is <code>null</code> if there are no NFTs in the <code>available_not_owned</code> category.</li> <li><code>owned_not_available</code> (list): A list of token IDs representing the NFTs that are owned by the player but are currently not able to be used in-game by this player.</li> <li><code>owned_and_available</code> (list): A list of token IDs representing the NFTs that are owned by the player and available to be used in-game by this player.</li> <li><code>available_not_owned</code> (list): A list of token IDs representing the NFTs that are owned by another player but are currently being used in-game by this player.</li> </ul> <p>Example Response Body (Success):</p> JSON <pre><code>{\n    \"success\": true,\n    \"response\": {\n        \"lender_ign\": \"lender_username\"\n        \"owned_and_available\": [\n            \"NFT1\",\n            \"NFT2\"\n        ],\n        \"available_not_owned\": [\n            \"NFT3\"\n        ]\n    }\n}\n</code></pre> <p>Example Response Body (Error):</p> JSON <pre><code>{\n    \"success\": false,\n    \"response\": \"Player not found\"\n}\n</code></pre>"},{"location":"info-endpoints/#integration-example_1","title":"Integration Example","text":"<p>Here's an example of how you can call the <code>get_player_inventory</code> endpoint from your game's backend:</p> Python <pre><code>import requests\n\ndef get_rsp_inventory(ign, payload):\n    response = requests.post(f\"{RSP_URL}/get_player_inventory/{ign}/\", json=payload, headers=rsp_headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n</code></pre> <p>In this example, <code>RSP_URL</code> refers to the base URL of the RSP API, and <code>rsp_headers</code> includes the necessary headers for authentication with the RSP API.</p> <p>To retrieve the player's inventory from the RSP API, you can make a POST request to the <code>get_player_inventory</code> endpoint, providing the player's in-game name (IGN) and the necessary payload data.</p> Python <pre><code>ign = \"PLAYER1\"\npayload = {\n    \"nfts_in_wallet\": [\"NFT1\", \"NFT2\"],\n    \"availability_types\": [\"owned_and_available\"]\n}\n\nrsp_inventory = get_rsp_inventory(ign, payload)\n\nif rsp_inventory[\"success\"]:\n    # Handle the inventory response data as needed\nelse:\n    # Error occurred while retrieving inventory\n    # Handle the error response\n</code></pre>"},{"location":"info-endpoints/#get-rewards-split","title":"Get Rewards Split","text":"<p>The <code>get_rewards_split</code> endpoint retrieves the rewards split information for a specific player who is a borrower in the RSP API. This endpoint accepts a GET request to retrieve the rewards split data.</p>"},{"location":"info-endpoints/#endpoint-url_2","title":"Endpoint URL","text":"<pre><code>GET /get_rewards_split/&lt;str:ign&gt;/\n</code></pre>"},{"location":"info-endpoints/#request-format_2","title":"Request Format","text":"<p>The request does not require a request body. You can include the player's in-game name (IGN) as a path parameter.</p> <p>Example Request:</p> <pre><code>GET /get_rewards_split/&lt;PLAYER1&gt;/\n</code></pre>"},{"location":"info-endpoints/#response-format_2","title":"Response Format","text":"<p>The response from the <code>get_rewards_split</code> endpoint follows a standard format:</p> <ul> <li><code>lender_ign</code> (string): The in-game name (IGN) of the player who lent the NFTs to the player via a Listing.</li> <li><code>lender_percent</code> (int): The percentage of the rewards that the lender will receive.</li> <li><code>rsp_ign</code> (string): The in-game name (IGN) of RSP account that will receive the fee for the Listing.</li> <li><code>rsp_percent</code> (int): The percentage of the rewards that will be paid as a fee to the RSP account.</li> <li><code>game_ign</code> (string): The in-game name (IGN) of the account that will receive the game's fee for the Listing.</li> <li><code>game_percent</code> (int): The percentage of the rewards that will be paid as a fee to the game's account.</li> </ul> <p>Example Response Body (Success):</p> JSON <pre><code>{\n    \"success\": true,\n    \"response\": {\n        \"lender_ign\": \"lender_username\",\n        \"lender_percent\": 60,\n        \"rsp_ign\": \"rsp_account_username\",\n        \"rsp_percent\": 10,\n        \"game_ign\": \"game_account_username\",\n        \"game_percent\": 5\n    }\n}\n</code></pre> <p>Example Response Body (Error):</p> JSON <pre><code>{\n    \"success\": false,\n    \"response\": \"Player not found\"\n}\n</code></pre> <p>Note</p> <p><code>get_rewards_split</code> will return an empty response (<code>{}</code>) when the player is not a borrower on any Listing.</p>"},{"location":"info-endpoints/#integration-example_2","title":"Integration Example","text":"<p>Here's an example of how you can call the <code>get_rewards_split</code> endpoint from your game's backend:</p> Python <pre><code>import requests\n\ndef get_rsp_rewards_split(ign):\n    response = requests.get(f\"{RSP_URL}/get_rewards_split/{ign}/\", headers=rsp_headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n</code></pre> <p>In this example, <code>RSP_URL</code> refers to the base URL of the RSP API, and <code>rsp_headers</code> includes the necessary headers for authentication with the RSP API.</p> <p>To retrieve the rewards split information from the RSP API, you can make a GET request to the <code>get_rewards_split</code> endpoint, providing the player's in-game name (IGN).</p> Python <pre><code>ign = \"PLAYER1\"\nrsp_rewards_split = get_rsp_rewards_split(ign)\n\nif rsp_rewards_split[\"success\"]:\n    # Handle the rewards split response data as needed\nelse:\n    # Error occurred while retrieving rewards split\n    # Handle the error response\n</code></pre>"},{"location":"migrate/","title":"Migrating to RSP","text":""},{"location":"migrate/#first-steps","title":"First Steps","text":"<p>The first step to integration is implementing all of the core endpoints into your production environment. This includes the following endpoints:</p> <ul> <li><code>create_players</code></li> <li><code>get_player_inventory</code></li> <li><code>get_reward_split</code></li> </ul> <p>After implementing these endpoints, you should call the <code>create_players</code> endpoint for all players in your game. This will create a player account for each player in the RSP records.</p> Python <pre><code>payload = {\n    \"igns\": [\"PLAYER1\", \"PLAYER2\", \"PLAYER3\"]\n}\nrsp_players = rsp_create_players(payload)\nif rsp_players[\"success\"]:\n    # Players created successfully\n    # Handle the response data as needed\nelse:\n    # Error occurred while creating players\n    # Handle the error response\n</code></pre> <p>Note</p> <p>The <code>create_players</code> endpoint will only create player accounts for players that do not already exist in the RSP records. If they already exist, the endpoint will not create a new one. This means that you can safely call the <code>create_players</code> endpoint for all players in your game, and it will not create any duplicates.</p>"},{"location":"revenue-share/","title":"Revenue Share Endpoints","text":"<p>Note</p> <p>These endpoints are only necessary for games that plan on implementing their own custom UI for the RSP integration. If you plan on using the RSP UI, you can skip this section.</p>"},{"location":"revenue-share/#get-player-listings","title":"Get Player Listings","text":"<p>The <code>get_player_listings</code> endpoint retrieves the listings associated with a specific player in the RSP API. This endpoint accepts a GET request to retrieve the player's listings.</p>"},{"location":"revenue-share/#endpoint-url","title":"Endpoint URL","text":"<pre><code>GET /get_player_listings/&lt;str:ign&gt;/\n</code></pre>"},{"location":"revenue-share/#request-format","title":"Request Format","text":"<p>The request does not require a request body. You need to include the player's in-game name (IGN) as a path parameter.</p> <p>Example Request:</p> <pre><code>GET /get_player_listings/&lt;PLAYER1&gt;/\n</code></pre>"},{"location":"revenue-share/#response-format","title":"Response Format","text":"<p>The response from the <code>get_player_listings</code> endpoint follows a standard format:</p> <ul> <li><code>success</code> (boolean): Indicates whether the request was successful (<code>true</code>) or if an error occurred during the process (<code>false</code>).</li> <li><code>response</code> (object): Contains the listings associated with the player, including the borrower listings and the lender listings.</li> </ul> <p>Example Response Body (Success):</p> JSON <pre><code>{\n    \"success\": true,\n    \"response\": {\n        \"borrower_listings\": [\n            {\n                \"id\": 1,\n                \"item_name\": \"Item 1\",\n                \"borrower\": \"PLAYER1\",\n                \"lender\": \"LENDER1\"\n            },\n            {\n                \"id\": 2,\n                \"item_name\": \"Item 2\",\n                \"borrower\": \"PLAYER1\",\n                \"lender\": \"LENDER2\"\n            }\n        ],\n        \"lent_listings\": [\n            {\n                \"id\": 3,\n                \"item_name\": \"Item 3\",\n                \"borrower\": \"PLAYER2\",\n                \"lender\": \"PLAYER1\"\n            },\n            {\n                \"id\": 4,\n                \"nft_uuids\": [\n                    \"4a\",\n                    \"4b\"\n                ],\n                \"description\": \"Item 4\",\n                \"lender_ign\": \"PLAYER1\",\n                \"tier\": ,\n                \"player_rating\": 0,\n                \"contract\": {},\n                \"status\": \"Available\",\n                \"market_type\": \"Revenue Share\",\n                \"borrower_ign\": null,\n                \"automatically_relist\": true,\n                \"private\": false\n            }\n        ]\n    }\n}\n</code></pre> <p>Example Response Body (Error):</p> JSON <pre><code>{\n    \"success\": false,\n    \"response\": {\n        \"error\": \"Player not found\"\n    }\n}\n</code></pre>"},{"location":"revenue-share/#integration-example","title":"Integration Example","text":"<p>Here's an example of how you can call the <code>get_player_listings</code> endpoint from your game's backend:</p> Python <pre><code>import requests\n\ndef get_player_listings(ign):\n    response = requests.get(f\"{RSP_URL}/get_player_listings/{ign}/\", headers=rsp_headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n</code></pre> <p>In this example, <code>RSP_URL</code> refers to the base URL of the RSP API, and <code>rsp_headers</code> includes the necessary headers for authentication with the RSP API.</p> <p>To retrieve the player's listings from the RSP API, you can make a GET request to the <code>get_player_listings</code> endpoint, providing the player's in-game name (IGN).</p> Python <pre><code>ign = \"PLAYER1\"\nrsp_listings = get_player_listings(ign)\n\nif rsp_listings[\"success\"]:\n    borrower_listings = rsp_listings[\"response\"][\"borrower_listings\"]\n    lent_listings = rsp_listings[\"response\"][\"lent_listings\"]\n    # Handle the listings data as needed\nelse:\n    # Error occurred while retrieving player listings\n    # Handle the error response\n</code></pre>"}]}